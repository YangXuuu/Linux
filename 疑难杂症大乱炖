#####
第一题： 如何显示一个文件的某几行（中间几行）
【一】从第3000行开始，显示1000行。即显示3000~3999行
cat filename | tail -n +3000 | head -n 1000

【二】显示1000行到3000行
cat filename| head -n 3000 | tail -n +1000

*注意两种方法的顺序

分解：

    tail -n 1000：显示最后1000行

    tail -n +1000：从1000行开始显示，显示1000行以后的

    head -n 1000：显示前面1000行

【三】用sed命令
sed -n '5,10p' filename 这样你就可以只查看文件的第5行到第10行。

#####
第二题：把文本的逗号替换成空格
方法1：进入文件改
参考https://www.pianshen.com/article/922352013/
%s 在整个文件范围查找并替换
/ 分隔符
/g 全局替换
输入 ：%s/,/ /g
就可以用空格‘ ’换掉‘，’

方法2：不进入文件改
sed -i 就是直接对文本文件进行操作的。


#####
第三题：统计文件夹中文件个数以及目录个数

执行ls -l命令控制台输出的结果是一行一行，每一行对应一个目录或者是文件。
如果是文件的话，该行的字符串信息的第一个字符显示的是“-”，如果是目录的话，该行的字符的第一个显示的是"d"，意即directory，找到这两者之间的区别，使用正则表达式就可以进行区分的了。

ls -l | grep "^-"，其中"^-"表示的是使用正则表达式，找到字符串的第一个字符为"-"的开始的。ls -l将结果输出到|管道，然后grep查询管道输出的内容，进行正则匹配查询。此行命令用于找出对应文件。
wc [-lwm]
参数：
-l 仅列出行数
-w 仅列出多少字（英文单字）
-m 多少字符
合起来：
ls -l |grep '^-' | wc -l

统计某个目录下面的目录数量
ls -l |grep '^d'|wc -l

统计文件夹下文件个数，包括子文件。ls -lR可以展示出某个目录下面的文件，以及该目录下面的目录下面的文件。
ls -lR | grep "^-"| wc -l

统计文件夹下目录个数，包括子目录，可以使用下面的命令即可。
ls -lR | grep "^d"| wc-l



###
vi时使用set list 查看换行符
###
在finalshell或xshell中
杀死进程用qdel而并非kill
kill只能杀死jobs看到的命令

###
fg %2

fg命令用于将后台作业（在后台运行的或者在后台挂起的作业）放到前台终端运行。与bg命令一样，若后台任务中只有一个，则使用该命令时，可以省略任务号。

###
读取文本文件，使用less时发现第一行最开始有<U+FEFF>,而使用vi与直接右键打开时却看不到
#去掉多余字符
$ vim file_name
:set nobomb
:wq
#此时出现！override
:wq!

显示日期与时间的指令：date
显示日历的指令：cal 
$ cal [month] [year]
简单好用的计算机：bc
$ quit


Tab键
具有命令补全和文件补齐的功能
ctrl-c键
终止程序
ctrl-d键
键盘输入结束-取代exit，直接离开
shift + pageup/pagedown
往前翻代码
-h （--help）
查看代码指令的基本用法与选项参数

显示命令操作说明 （man for manual）
$ man date

# 条件判断
if [条件判断式]; then
    当条件判断式成立时，可以进行的指令工作内容；
fi &lt；==

# 如果有多个条件要判别时，除了将多个条件写入一个中括号内的情况，还可以有多个中括号来隔开
&&代表AND； ||代表or

["${yn}"=="Y" -o "${yn}"=="y"] 可替换成 ["${yn}"=="Y"]||["${yn}"=="y"]

多重复杂条件判断式
# 一个条件判断，分成功和失败进行（else）
$ if [条件判断式]；then
   当条件判断式成立时，可以进行的指令工作内容；
$ else
   当条件判断式不成立时，可以进行的指令工作内容；
$ fi

如果是更复杂的情况，则可以使用这个语法：
# 多个条件判断 (if ... elif ... elif ... else) 分多种不同情况执行
If [条件判断式一]；then
    当条件判断式一成立时，可以进行的指令工作内容；
elif [条件判断式二]；then
    当条件判断式二成立时，可以进行的指令工作内容；
else
    当条件判断式一与二不成立时，可以进行的指令工作内容；
fi

# 要注意的是，elif也是个判别式，因此出现elif后面都要接then来处理；但else已经是最后的没有成立的结果了，所以else后面并没有then

### 如果你不希望使用由键盘输入额外的数据时，可以使用参数功能（$1），让使用者在下达指令时就将参数带进去，现在想让使用者输入hello这个关键词时，利用参数的方法可以这样依序设计：
1. 判断$1是否为hello，如果是，就显示“hello，how are you？”；
2. 如果没有加任何参数，就提示使用者必须要使用的参数下达法；
3. 如果加入的参数不是hello，就提醒使用者仅能使用hello为参数

# !/bin/bash
# Program:
#     check $1 is equal to "hello"
$ PATH = ～/bin
$ export PATH
$ if ["${1}" == "hello"]; then
$     echo "Hello, how are you?"
$ elif ["${1}" == ""]; then
$    echo "You MUST input parameters, ex&gt; {${0} someword}"
$ else
$     echo "The only parameter is 'hello', ex&gt; {${0} hello} "
$ fi

$ netstat
查询到目前主机有打开的网络服务端口（service ports）
可以利用netstat -tuln来取得目前主机有启动的服务
local adress（本地主机的IP与端口对应）
IP的部分说明的是该服务位于那个接口上，若为127.0.0.1则是仅针对本机开放，若是0.0.0.0或:::则代表对整个internet开放





